
type Point struct {
  x int,
  y int,
}

fn destroy(p *Point, g *Game) {

}

type Object interface {
  fn destroy(o *Object, g *Game)
}

type Object2 interface {
  fn destroy(o *Object2, g *Game)
}

type Game struct {
  pointsV vec[4]Point
  pointsB buf[8]Point
  pointsP pool[16]Point
  os1 vec[4]Object
  os2 vec[4]Object2
  vInt vec[]int
}

fn main() int
{
  p1 := Point{1,2}
  p2 := Point{4,3}

  g := Game{}
  g.os1.push(&p1)
  g.os1.push(&p1)
  g.os1.push(&p2)

  if (g.os1[0] == g.os1[1])
    printf("works for me 1\n")
  if (g.os1[0] != g.os1[2])
    printf("works for me 2\n")
  if (g.os1[0] != g.os1[1])
    printf("noooo 1\n")
  if (g.os1[1] == g.os1[2])
    printf("noooo 1\n")

  printf("ok\n")
  return 0
}
