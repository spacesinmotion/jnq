
use test.AnotherThing
use test.SomeThing
use tests.sub.util

type Vec2 struct {
  x float, 
  y float,
}

fn neg(v Vec2) Vec2 {
  return Vec2{-v.x, -v.y}
}

fn add(v1 Vec2, v2 Vec2) Vec2 {
  return Vec2{v1.x + v2.x, v1.y + v2.y}
}

type Vec3 struct {
  x float 
  y float
  z float 
}

type Stuff union {
  *Vec2, *Vec3
}

type Days enum {
  Mon, Tue, Wed, Thu = 4, Fri, Sat = -4, Sun
}

fn a_fn(a *Vec3, b [2]Vec2) float {
  d Days = Days.Sat
  v [2]*Vec2

  if (a) 
    return a.x * b[0].x
  
  x float = a_fn(a, &Vec2{})
  y Vec2 = b[0].add(*v[0])

  return x
}

fn main() int
{
  printf("Hallo %s\n", "du")

  ASSERT(1 != 0)

  a Vec2
  a = a.add(a)
  ASSERT(42 == util.add(31, 11))
  printf("sub call %d\n", util.add(31, 11))
}