
// use Game from tests.game.Game
// use Program from tests.src.Program
// use tests.game.math.util

// use * from C.stdio

type SomeAble interface {
  fn id(s *SomeAble, f int) int
  fn val(s *SomeAble) int
}

fn some(x *SomeAble) int {
  return x.id(42) + x.val()
}


type Some1 struct {
  xx int
}

fn id(s *Some1, m int) int {
  printf("--- id Some1 %d\n", s.xx)

  return s.xx * m
}

fn val(s *Some1) int {
  printf("--- val Some1 %d\n", s.xx)

  return s.xx
}


fn main() int
{
  printf("main\n")

  s := SomeAble{}
  ASSERT(s == null)
  s = &Some1{3}

  vx := SomeAble{}
  v := vec[]SomeAble{}
  s1 := Some1{2}
  s2 := Some1{2}
  v.push(&s1)
  v.push(&s2)

  some(&v[0])

  printf("ok\n")
  return 0
}
