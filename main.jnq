
use * from tests.src.Program

type StatementType enum {
  ExpressionS,
  Return,
  Break,
  Continue,
  Case,
  Default,
  Scope,
  If,
  For,
  While,
  DoWhile,
  Switch,
}

type State struct {
  file *char
  c *char
  line int

  column i32
}

fn at(st *State, i i32) *State {
  return &st[i]
}

fn sum(st[*]State) i32 {
  return st[st[8].column].line
}

fn sub(st State) i32 {
  return st.line / st.column
}

fn StartState(c *char, file *char) State {
  return State{
    file: file,
    c: c,
    line: 1,
    column: 1
  }
}

fn count(t[]char) i32 {
  return len(t)
}

type SomeAble interface {
  fn id(s *SomeAble, f int) int
  fn val(s *SomeAble) i32
}

A_CONST := 123545
B_CONST := true
C_CONST := [1, 2, 3]

fn main(argc i32, argv **char) int {
  more_text := [
    "A", "B", "C"
  ]

  text := "Hello World"
  print(len(text), text)
  sub := text[6: 8]
  print(len(sub), sub)

  {
    text := 123
    print(text, sub, more_text[2])
  }

  stuff := MemoryArena{}
  print(stuff.check())

  switch (StatementType.Break) {
    case StatementType.Break:
    x := 1
    print(1)
  case StatementType.Case:
    o := "hello"
    print(o, text)
  }

  print(argc, text[-4: -2], A_CONST, B_CONST)

  ASSERT(len(C_CONST) == 3)

  print("...ok", 1, 2, 3, count("okok"))

  return 0
}

