
type SomeAble interface {
  fn id(s *SomeAble) i32
}

type SomeImp struct {
  val i32
}

fn id(s *SomeImp) i32 {
  return s.val
}

fn compare_render_objects(const a any, const b any) int {
  da := (a as *SomeAble).id()
  db := (b as *SomeAble).id()
  return da > db ? -1 : (da < db ? 1 : 0)
}

fn main(argc i32, argv[]*char) int
{
  a := new[]SomeAble{}

  x := SomeImp{42}

  push(a, null)
  push(a, &x)

  ASSERT(a[0] == null)
  ASSERT(a[1] != null)
  ASSERT(a[1].id() == 42)
  print(".", a[1].id())

  delete a

  print("ok", x.id())
  return 0
}
