
type Vec3i struct {
  i i32,
  j i32,
  k i32,
}

fn __eq(a Vec3i, b Vec3i) bool {
  return a.i == b.i && a.j == b.j && a.k == b.k
}
fn __ne(a Vec3i, b Vec3i) bool {
  return !__eq(a, b)
}
fn __mod(a Vec3i, b Vec3i) Vec3i {
  return Vec3i{a.i % b.i, a.j % b.j, a.k % b.k}
}

fn main(argc i32, argv **char) i32 {
  print("overload operator for types")

  a := Vec3i{0, 0, 0}
  b := Vec3i{1, 2, 3}

  ASSERT(b.__eq(b))
  ASSERT(!a.__eq(b))

  ASSERT(a == a)
  ASSERT(a != b)

  ASSERT(a % b == a)
  ASSERT(b % b == Vec3i{0})

  print("ok")
  return 0
}

