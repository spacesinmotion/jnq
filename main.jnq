
type Point struct {
  x int,
  y int,
}


fn main() int
{
  v := pool[128]Point{}
  ASSERT(0 == v.__l)
  ASSERT(null == v.__f)

  p1 := v.create(Point{1,2})
  ASSERT(1 == v.__l)
  ASSERT(null == v.__f)
  ASSERT(1 == p1.x)
  ASSERT(2 == p1.y)

  v.remove(p1)
  ASSERT(1 == v.__l)
  ASSERT(null != v.__f)

  p2 := v.create(Point{3,6})
  ASSERT(1 == v.__l)
  ASSERT(null == v.__f)
  ASSERT(3 == p2.x)
  ASSERT(6 == p2.y)
  ASSERT(3 == p1.x)
  ASSERT(6 == p1.y)
  
  // v.push(Point{3,6})
  // ASSERT(1 == v.len)
  // ASSERT(128 == v.cap)
  // ASSERT(3 == v[0].x)
  // ASSERT(6 == v[0].y)

  printf("ok\n")
  return 0
}
