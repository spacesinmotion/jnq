
use sub.util

type Stuff struct {
  a int
  b int
}

type Swoll union {
  a double
  b double
}

type Spold struct {
  x Stuff
  y Swoll
}

fn set_a(s *Stuff, x int) {
  s->a = x
}

fn swap_a_b(s Stuff) Stuff {
  x int = s.b
  s.b = s.a
  s.a = x
  return s
}

fn swap_a_b_ptr(s *Stuff) Stuff {
  return Stuff{s.b, s.a}
}

fn construction()  {
  printf(" .construction\n")
  s := Stuff{}
  ASSERT(s.a == 0)
  ASSERT(s.b == 0)

  s = Stuff{3, 2}
  ASSERT(s.a == 3)
  ASSERT(s.b == 2)
  ASSERT(s.b * s.a == 6)

  s.a = 42
  ASSERT(s.a == 42)
  ASSERT(s.b == 2)

  s = Stuff{b: 22, a: 33}
  ASSERT(s.a == 33)
  ASSERT(s.b == 22)
}

fn call_member()  {
  printf(" .call_member\n")

  s := Stuff{3, 2}
  ss := s.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  sss Stuff = swap_a_b(s)
  ASSERT(sss.a == 2)
  ASSERT(sss.b == 3)
}

fn call_member_pointer_or_not()  {
  printf(" .call_member_pointer_or_not\n")

  s := Stuff{3, 2}
  sp := &s
  ss := s.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  ss = sp.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  ss = sp.swap_a_b_ptr()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)
}

fn union_check()  {
  printf(" .union_check\n")

  s := Swoll{0.4}
  ASSERT(s.a == 0.4)
  ASSERT(s.b == 0.4)

  s.b = 0.6

  ASSERT(s.a == 0.6)
  ASSERT(s.b == 0.6)
}


type X struct {
  i int
  x *X
  y *Y
}

type Y struct {
  f float
}

fn use_structs_defined_later()  {
  printf(" .use_structs_defined_later\n")

  a_y := Y{1.0f}
  a_x := X{0, null, &a_y}
  b_x := X{1, &a_x, &a_y}

  ASSERT(a_x.y.f == 1.0f)
  ASSERT(b_x.y.f == 1.0f)
  ASSERT(b_x.x.y.f == 1.0f)

  b_x.x.y.f = 4.0f

  ASSERT(a_x.y.f == 4.0f)
  ASSERT(b_x.y.f == 4.0f)
  ASSERT(b_x.x.y.f == 4.0f)
}

fn compined_check()  {
  printf(" .compined_check\n")

  s := Spold{
    x: Stuff{
      a: 3,
      b: 12
    },
    y: Swoll{b: 4.2}
  }
  ASSERT(s.x.a == 3)
  ASSERT(s.x.b == 12)
  ASSERT(s.y.b == 4.2)
  ASSERT(s.y.a == 4.2)
}

fn member_call_with_args()  {
  printf(" .member_call_with_args\n")

  s := Stuff{}
  ASSERT(s.a == 0)
  ASSERT(s.b == 0)

  set_a(&s, 20)
  ASSERT(s.a == 20)

  s.set_a(11)
  ASSERT(s.a == 11)
}

type Kool enum { KoolA, KoolB, KoolC }

type Vec struct {
  v [3]double
  i int
  n Kool
  x util.Nix
}

fn structs_with_arrays_and_enums()  {
  printf(" .structs_with_arrays_and_enums\n")

  dir := Vec{}
  dir.i = 25
  dir.n = Kool.KoolB
  dir.x = util.Nix.Nicer
  dir.v[0] = 2.5
  dir.v[1] = 3.5
  dir.v[2] = 4.5

  ASSERT(dir.i == 25)
  ASSERT(dir.n == Kool.KoolB)
  ASSERT(dir.x == util.Nix.Nicer)
  ASSERT(dir.v[0] == 2.5)
  ASSERT(dir.v[1] == 3.5)
  ASSERT(dir.v[2] == 4.5)
}

fn main() int {
  printf("structs\n")

  construction()
  call_member()
  call_member_pointer_or_not()
  union_check()
  compined_check()
  member_call_with_args()
  use_structs_defined_later()
  structs_with_arrays_and_enums()

  printf(" ...ok\n")
  return 0
}