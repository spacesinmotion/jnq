
type Stuff struct {
  a int
  b int
}

fn swap_a_b(s Stuff) Stuff {
  x int = s.b
  s.b = s.a
  s.a = x
  return s
}

fn swap_a_b_ptr(s *Stuff) Stuff {
  return Stuff{s.b, s.a}
}

fn construction()  {
  printf(" .construction\n")
  s Stuff = Stuff{}
  ASSERT(s.a == 0)
  ASSERT(s.b == 0)

  s = Stuff{3, 2}
  ASSERT(s.a == 3)
  ASSERT(s.b == 2)
  ASSERT(s.b * s.a == 6)

  s.a = 42
  ASSERT(s.a == 42)
  ASSERT(s.b == 2)

  s = Stuff{b: 22, a: 33}
  ASSERT(s.a == 33)
  ASSERT(s.b == 22)
}

fn call_member()  {
  printf(" .call_member\n")

  s Stuff = Stuff{3, 2}
  ss Stuff = s.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  sss Stuff = swap_a_b(s)
  ASSERT(sss.a == 2)
  ASSERT(sss.b == 3)
}

fn call_member_pointer_or_not()  {
  printf(" .call_member_pointer_or_not\n")

  s Stuff = Stuff{3, 2}
  sp *Stuff = &s
  ss Stuff = s.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  ss = sp.swap_a_b()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)

  ss = sp.swap_a_b_ptr()
  ASSERT(ss.a == 2)
  ASSERT(ss.b == 3)
}

fn main() int {
  printf("structs\n")

  construction();
  call_member();
  call_member_pointer_or_not();

  printf(" ...ok\n")
}