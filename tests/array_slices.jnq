
use printf from C.stdio
use qsort from C.stdlib

type ABC struct {
  a i32,
  b f32,
  c char,
}

fn check_all_doubled_c(a *i32, l i32){
  for (i := 0; i < l; ++i)
    ASSERT(a[i] == i * 2)
}

fn check_all_doubled(a[]i32){
  for (i := 0; i < len(a); ++i)
    ASSERT(a[i] == i * 2)
}

fn default_cast_check_size(a[]i32, expect i32){
  ASSERT(len(a) == expect)
}
fn default_cast_check_size_char(a[]char, expect i32){
  ASSERT(len(a) == expect)
}

fn simple_int()
{
  print(" .simple_int")
  aa := new[32]i32{}
  for (i := 0; i < 32; ++i)
    aa[i] = i * 2

  a := aa[0: 32]

  ASSERT(32u == len_s(a))
  ASSERT(32u == cap_s(a))
  ASSERT(32 == len(a))
  ASSERT(32 == cap(a))
  for (i := 0; i < len(a); ++i)
    ASSERT(a[i] == i * 2)
  check_all_doubled_c(a, len(a))
  check_all_doubled(a)

  delete aa
}

fn simple_struct()
{
  print(" .simple_struct")

  bb := new[3]ABC{}
  b := bb[0 : 2]
  ASSERT(len(b) == 2)
  ASSERT(cap(b) == 2)
  for (i := 0; i < len(b); ++i) {
    b[i].a = i * 3
    b[i].b = i as f32 / 2.0f
    b[i].c = (i) as char + 'a'
  }
  for (i := 0; i < len(b); ++i) {
    ASSERT(b[i].a == i * 3)
    ASSERT(b[i].b == i as f32 / 2.0f)
    ASSERT(b[i].c == i as char + 'a')
  }

  delete bb
}

type XYZ struct {
  a[]f32,
}

fn as_members()
{
  print(" .as_members")

  w := XYZ{}
  ASSERT(len(w.a) == 0)
  ASSERT(cap(w.a) == 0)

  aa := new[8]f32{}
  w.a = aa[2 : 7]

  ASSERT(len(w.a) == 5)
  ASSERT(cap(w.a) == 5)

  for (i := 0; i < len(w.a); ++i)
    w.a[i] = i as f32 * 10.0f

  for (i := 0; i < len(w.a); ++i) {
    ASSERT(w.a[i] == i as f32 * 10.0f)
    ASSERT(aa[i + 2] == i as f32 * 10.0f)
  }

  delete aa
}

fn comp(const ap any, const bp any) i32 {
  a := *(ap as *i32)
  b := *(bp as *i32)
  if (a < b) return -1
  if (a > b) return 1
  return 0
}

fn qsort_any_slice()
{
  print(" .qsort_any_slice")

  aa := new[]i32{}
  for (i := 0; i < 100; ++i)
    push(aa, 100 - i *2)

  a := aa[12: 86]
  for (i := 1; i < len(a); ++i)
    ASSERT(a[i -1] > a[i])
  qsort(a, len_s(a), sizeof(i32), comp)
  for (i := 1; i < len(a); ++i) {
    ASSERT(a[i - 1] < a[i])
    ASSERT(a[i] == aa[i + 12])
  }

  delete aa
}

type SomeAble interface {
  fn id(s *SomeAble) i32
}

type SomeImp struct {
  val i32
}

fn id(s *SomeImp) i32 {
  return s.val
}

fn interface_in_slice()
{
  print(" .interface_in_slice")

  aa := new[]SomeAble{}
  push(aa, null)
  push(aa, null)

  a := aa[1: len(aa)]
  ASSERT(len(a) == 1)
  x := SomeImp{42}

  a[0] = &x
  ASSERT(aa[0] == null)
  ASSERT(aa[1] != null)
  ASSERT(a[0].id() == 42)
  ASSERT(aa[1].id() == 42)

  delete aa
}

fn starting_test()
{
  print(" .starting_test")
  a := reserve(new[]int{}, 12)

  for (i := 0; i < cap(a); ++i)
    push(a, i + 1)
  ASSERT(len(a) == 12 && cap(a) == 12)

  b := a[1: 4]
  ASSERT(len(b) == 3);
  ASSERT(b[0] == 2);
  ASSERT(b[1] == 3);

  b[1] = 42;
  ASSERT(b[1] == 42);
  ASSERT(a[2] == 42);

  delete a
}

fn relevant_sub_list(list[*]int, a int) []int {
  return list[a: len(list)]
}

fn slices_as_return_value_test()
{
  print(" .slices_as_return_value_test")

  aa := reserve(new[]int{}, 12)
  for (i := 0; i < cap(aa); ++i)
    push(aa, i + 1)

  a := relevant_sub_list(aa, 4)
  ASSERT(len(a) == 12 - 4)
  ASSERT(a[0] == 5)

  delete aa
}

fn array_default_cast_to_slices()
{
  print(" .array_default_cast_to_slices")

  aa := [12]int{}
  for (i := 0; i < len(aa); ++i)
    aa[i] = 2 * i
  check_all_doubled(aa)
  default_cast_check_size(aa, 12)

  bb := [9]char{}
  default_cast_check_size_char(bb, 9)
  default_cast_check_size_char("some", 4)
}

fn dynamic_array_default_cast_to_slices()
{
  print(" .dynamic_array_default_cast_to_slices")

  aa := reserve(new[]int{}, 12)
  for (i := 0; i < cap(aa); ++i)
    push(aa, 2 * i)
  check_all_doubled(aa)

  delete aa
}

fn slice_from_slices()
{
  print(" .slice_from_slices")

  aa := [12]int{}
  for (i := 0; i < len(aa); ++i)
    aa[i] = 2 * i

  bb := aa[0 : 8]
  check_all_doubled(bb)
  cc := bb[0 : 4]
  check_all_doubled(cc)
}

fn negative_indices()
{
  print(" .negative_indices")

  da := new[12]int{}
  aa := [12]int{}
  for (i := 0; i < len(aa); ++i) {
    aa[i] = 2 * i
    da[i] = 2 * i
  }

  bb := aa[0 : -4]
  ASSERT(len(bb) == 12 - 4)
  db := da[0 : -4]
  ASSERT(len(db) == 12 - 4)

  cc := bb[0 : -4]
  ASSERT(len(cc) == 12 - 4 - 4)
  dc := db[0 : -4]
  ASSERT(len(dc) == 12 - 4 - 4)

  cc = da[0: 1243]
  ASSERT(len(cc) == 12)
  cc = da[-20: 1243]
  ASSERT(len(cc) == 12)
  cc = da[-20: 1]
  ASSERT(len(cc) == 1)
  cc = da[-20: 0]
  ASSERT(len(cc) == 12)
  cc = da[-20: ]
  ASSERT(len(cc) == 12)
  cc = da[-6 : -4]
  ASSERT(len(cc) == 2)
  cc = da[-4 : ]
  ASSERT(len(cc) == 4)
  cc = da[-4 : -6]
  ASSERT(len(cc) == 0)

  delete da
}

fn main() i32 {
  print("array slices")

  starting_test()
  simple_int()
  simple_struct()
  as_members()
  qsort_any_slice()
  interface_in_slice()
  slices_as_return_value_test()
  array_default_cast_to_slices()
  dynamic_array_default_cast_to_slices()
  slice_from_slices()
  negative_indices()

  print(" ...ok")
  return 0
}