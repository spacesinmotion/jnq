use printf from C.stdio
use Some2 from sub.util

type SomeAble interface {
  fn id(s *SomeAble, f int) int
  fn val(s *SomeAble) int
}

fn some(x SomeAble) i32 {
  return x.id(42) + x.val()
}
fn some1(x *SomeAble) i32 {
  return x.id(42) + x.val()
}
fn some2(x any) i32 {
  return (x as *SomeAble).id(42) + (x as *SomeAble).val()
}

type SomeContainer struct {
  s SomeAble
}

type Some1 struct {
  xx int
}

fn id(s *Some1, m i32) i32 {
  printf("--- id Some1 %d\n", s.xx)

  return s.xx * m
}

fn val(s *Some1) i32 {
  printf("--- val Some1 %d\n", s.xx)

  return s.xx
}

fn basic_2_structs_1_interface()
{
  printf(" .basic_2_structs_1_interface\n")

  s1 := Some1{2}
  ASSERT(2 == s1.xx)
  ASSERT(86 == some(&s1))

  s2 := Some2{3}
  ASSERT(3 == s2.xx)
  ASSERT(51 == some(&s2))
}

fn interface_in_dyn_arrays()
{
  printf(" .interface_in_dyn_arrays\n")

  v := new[]SomeAble{}
  s1 := Some1{2}
  push(v, &s1)
  s2 := Some2{3}
  push(v, &s2)

  ASSERT(86 == some(&v[0]))
  ASSERT(51 == some(&v[1]))

  delete v
}

fn interface_in_structs()
{
  printf(" .interface_in_structs\n")

  s1 := Some1{2}
  c := SomeContainer{&s1}

  ASSERT(86 == some(&c.s))
}

fn interface_could_be_null()
{
  printf(" .interface_could_be_null\n")

  s := SomeAble{}
  ASSERT(s == null)

  s = &Some1{2}
  ASSERT(86 == some(&s))

  s = &Some2{3}
  ASSERT(51 == some(&s))

  s = null
  ASSERT(s == null)
}

fn interfaces_and_construction()
{
  printf(" .interfaces_and_construction\n")

  s0 := SomeAble{}
  c0 := SomeContainer{s0}
  ASSERT(c0.s == null)

  c0 = SomeContainer{null}
  ASSERT(c0.s == null)

  c1 := SomeContainer{&Some1{2}}
  ASSERT(c1.s != null)
  ASSERT(86 == some(&c1.s))
}

type Object interface {
  fn destroy(o *Object, g *Game)
}

type Object2 interface {
  fn destroy(o *Object2, g *Game)
}

type RealObject struct {
  name *char // need a non empty object
}

fn destroy(ro *RealObject, g *Game) {}

type Game struct {
  object Object

  os1[4]Object
  os2[4]Object2
}

fn GameObject_recursive_declaration()
{
  printf(" .GameObject_recursive_declaration\n")

  g := Game{}
}

fn compare_interface_as_pointer()
{
  printf(" .compare_interface_as_pointer\n")

  p1 := RealObject{}
  p2 := RealObject{}

  g := Game{}
  g.os1[0] = &p1
  g.os1[1] = &p1
  g.os1[2] = &p2

  ASSERT(g.os1[0] == g.os1[1])
  ASSERT(g.os1[0] != g.os1[2])
  ASSERT(!(g.os1[0] != g.os1[1]))
  ASSERT(!(g.os1[1] == g.os1[2]))
}

fn main() i32
{
  printf("interfaces\n")
  basic_2_structs_1_interface()
  interface_in_structs()
  interface_could_be_null()
  interface_in_dyn_arrays()
  GameObject_recursive_declaration()
  compare_interface_as_pointer()
  printf(" ...ok\n")
  return 0
}
