use printf from C.stdio
use Point from sub.util

fn pool_Point()
{
  printf(" .pool_Point\n")

  v := pool[128]Point{}
  ASSERT(0 == v.__l)
  ASSERT(null == v.__f)

  p1 := v.create(Point{1, 2})
  ASSERT(1 == v.__l)
  ASSERT(null == v.__f)
  ASSERT(1 == p1.x)
  ASSERT(2 == p1.y)

  v.remove(p1)
  ASSERT(1 == v.__l)
  ASSERT(null != v.__f)

  p2 := v.create(Point{3, 6})
  ASSERT(1 == v.__l)
  ASSERT(null == v.__f)
  ASSERT(3 == p2.x)
  ASSERT(6 == p2.y)
  ASSERT(3 == p1.x)
  ASSERT(6 == p1.y)
}

fn pool_empty_test()
{
  printf(" .pool_empty_test\n")

  v := pool[4]Point{}

  p1 := v.create(Point{0, 0})
  for (i := 1; i < 4; ++i) {
    ASSERT(!v.empty())
    v.create(Point{0, 0})
  }
  ASSERT(v.empty())
  v.remove(p1)
  ASSERT(!v.empty())
}

fn buf_test() {
  printf(" .buf_Point\n")

  v := buf[8]Point{}
  ASSERT(0 == v.len)

  v.push(Point{1, 2})
  ASSERT(1 == v.len)
  ASSERT(1 == v[0].x)
  ASSERT(2 == v[0].y)

  v[0].x = 5
  v[0].y = 3
  p1 := v.pop()
  ASSERT(0 == v.len)
  ASSERT(5 == p1.x)
  ASSERT(3 == p1.y)
}

fn main() int
{
  printf("pool_test\n")
  pool_Point()
  buf_test()
  printf(" ...ok\n")
  return 0
}
