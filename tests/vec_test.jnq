
use Point from sub.util

fn a_wrapper(v *vec[]int) int {
  return v.len
}

fn int_vec()
{
  printf(" .int_vec\n")

  v := vec[]int{}
  ASSERT(0 == v.len)
  ASSERT(0 == v.cap)
  v.push(42)
  ASSERT(1 == v.len)
  ASSERT(16 == v.cap)
  ASSERT(42 == v[0])

  v[0] = 21
  ASSERT(21 == v[0])

  x := v.pop()
  ASSERT(0 == v.len)
  ASSERT(16 == v.cap)
  ASSERT(21 == x)

  for (i:=0; i<100; ++i)
    v.push(i + 1)
  
  ASSERT(100 == v.len)
  ASSERT(16*7 == v.cap)
  ASSERT(1 == v[0])
  ASSERT(33 == v[32])

  v.free()
}

fn vec_Point()
{
  printf(" .vec_Point\n")

  v := vec[128]Point{}
  ASSERT(0 == v.len)
  ASSERT(0 == v.cap)

  v.push(Point{3,6})
  ASSERT(1 == v.len)
  ASSERT(128 == v.cap)
  ASSERT(3 == v[0].x)
  ASSERT(6 == v[0].y)

  v.free()
}

fn vec_float_int()
{
  printf(" .vec_float_int\n")

  vi := vec[32]int{}
  vi.push(32)
  vf := vec[]float{}
  vf.push(12.0f)

  ASSERT(vi[0] == 32)
  ASSERT(vf[0] == 12.0f)

  ASSERT(vi.cap == 32)
  ASSERT(vf.cap == 16)

  vi.free()
  vf.free()
}

fn vec_of_pointer()
{
  printf(" .vec_of_pointer\n")

  i := 42;
  vi := vec[32]*int{}
  vi.push(&i);

  ASSERT(vi.len == 1)
  ASSERT(*vi[0] == 42)

  i = 21
  ASSERT(*vi[0] == 21)

  *vi[0] = 54321
  ASSERT(*vi[0] == 54321)
  ASSERT(i == 54321)

  vi.free()
}

fn pointer_to_vec()
{
  printf(" .vec_of_pointer\n")

  v1 := vec[]int{}
  v1.push(1);
  v2 := vec[]int{}
  v2.push(2);
  v2.push(4);

  ASSERT(v1.len == a_wrapper(&v1))
  ASSERT(v2.len == a_wrapper(&v2))
  ASSERT(a_wrapper(&v1) !=  a_wrapper(&v2))

  v1.free()
  v2.free()
}

fn main() int
{
  printf("vec_test\n")
  int_vec()
  vec_Point()
  vec_float_int()
  vec_of_pointer()
  printf(" ...ok\n")
  return 0
}
