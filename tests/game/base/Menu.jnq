
use Image from tests.game.gfx.Image
use OverlayImage from tests.game.gfx.OverlayImage
use OverlayText from tests.game.gfx.OverlayText
use lerp, clampi, max, abs from tests.game.math.util

use ItemItem from Item

cfn strlen(t *char) int

type Depend struct {
  img *OverlayImage,
  text *OverlayText,
  pos int,
  available bool
}

fn move_alpha(e *Depend, rx float, ry float, a float){
  e.img.set_position(rx + 8.0f + e.pos as float * 40.0f, ry + 40.0f - 16.0f)
  e.text.set_position(rx + 24.0f + e.pos as float * 40.0f, ry + 40.0f - 8.0f)
  v := 0.2f
  if (e.available)
    v = 0.9f
  e.img.set_color(0.9f, 0.9f, 0.9f, a)
  e.text.set_color(0.9f, v, v, a)
}

fn destroyDepend(e *Depend) {
  e.img.destroy()
  e.text.destroy()
}

type Entry struct {
  text *OverlayText
  img *OverlayImage
  back *OverlayImage

  key *char
  x float
  y float
  a float
  fx float
  fy float
  fa float
  available bool
  needed vec[]Depend
}

fn destroyEntry(e *Entry) {
  e.back.destroy()
  e.img.destroy()
  e.text.destroy()
  for (i:=0; i<e.needed.len; ++i) 
    e.needed[i].destroyDepend() 
  e.needed.free()
}

fn apply(e *Entry) {
  for (i:=0; i<e.needed.len; ++i) 
    e.needed[i].move_alpha(e.x, e.y, e.a)

  e.text.set_position(e.x + 48.0f, e.y + 8.0f)
  e.img.set_position(e.x + 8.0f, e.y + 8.0f)
  e.back.set_position(e.x + 2.0f, e.y + 2.0f)
  e.back.set_color(0.1f, 0.1f, 0.1f, e.a)
  v := 0.2f
  if (e.available)
    v = 0.9f
  e.text.set_color(v, v, v, e.a)
  e.img.set_color(v, v, v, e.a)
}

fn updateEntry(e *Entry) {
  e.x = lerp(e.fx, e.x, 0.9f)
  e.y = lerp(e.fy, e.y, 0.9f)
  e.a = lerp(e.fa, e.a, 0.9f)
  e.apply()
}



fn set_option(e *Entry, o int, g int, jump bool) {
  e.fx = 240.0f + g as float * 188.0f 
  e.fy = 240.0f + o as float * 48.0f
  if (g == 0) 
    e.fa = max(0.0f, 1.0f - abs(o as float) / 2.0f)
  else
    e.fa = 0.0f
  
  if (jump) { 
    e.x = e.fx
    e.y = e.fy
    e.a = e.fa 
  }
}

type Group struct {
  text *OverlayText
  entries vec[]Entry

  fa float
  a float
  name *char
}

fn destroyGroup(g *Group) {
  g.text.destroy()
  for (i := 0; i<g.entries.len; ++i)
    g.entries[i].destroyEntry()
  g.entries.free()
}


fn updateGroup(g *Group, on bool) {
  if (on)
    g.fa = 1.0f
  else  
    g.fa = 0.0f
  g.a = lerp(g.fa, g.a, 0.9f)
  g.text.set_color(0.9f, 0.9f, 0.2f, g.a)
}

type Menu struct {
  groups vec[]Group

  selected_group int
  selected_entry int

  marker *OverlayImage
  marker_a float

  done_init bool
  dead bool
}

fn NewMenu() Menu {
  m := Menu{
    selected_group: 0,
    selected_entry: 0,
    // marker: gfx.new_overlay_billboard(),
    marker_a: 0.3f,
    done_init: false,
    dead: false,
  }
  m.marker.set_color(0.9f, 0.87f, 0.1f, 1.0f)
  m.marker.set_position(240.0f - 3.0f, 240.0f - 1.0f)
  m.marker.set_size(186.0f, 2.0f + 48.0f)
  return m
}

fn destroy(m *Menu) {
  m.marker.destroy()
  for (i := 0; i<m.groups.len; ++i) 
    m.groups[i].destroyGroup() 
  m.groups.free()
}

fn group(m *Menu) *Group {
  return &m.groups[m.selected_group]
}

fn entry(m *Menu) *Entry {
  return &m.group().entries[m.selected_entry]
}

fn die(m *Menu) {
  m.dead = true
}

fn confirm_choice(m *Menu) {
  e := m.entry()
  if (e.available
   // && e.on_confirm
   ) {
    // e.on_confirm()
    m.die()
  }
}

fn update(m *Menu, dt float) {
  // if (KEYS_DOWN.pressed("tab"))
  //   return m.die()
  // if (KEYS_DOWN.pressed("e")) 
  //   return m.confirm_choice() 
  // if (KEYS_DOWN.pressed("w"))
  //   m.select(m.selected_group, m.selected_entry - 1)
  // if (KEYS_DOWN.pressed("s"))
  //   m.select(m.selected_group, m.selected_entry + 1)
  // if (KEYS_DOWN.pressed("a"))
  //   m.select(m.selected_group - 1, m.selected_entry)
  // if (KEYS_DOWN.pressed("d")) 
  //   m.select(m.selected_group + 1, m.selected_entry)
  
  for (j:=0; j<m.groups.len; ++j) {
    g := &m.groups[j]
    g.updateGroup(m.selected_group == j)
    for (i:=0; i<g.entries.len; ++i) {
      e := &g.entries[i]
      e.set_option(i - m.selected_entry, j - m.selected_group, !m.done_init)
      e.updateEntry()
    }
  }
  m.marker_a = lerp(0.9f, m.marker_a, 0.93f)
  m.marker.set_color(0.9f, 0.87f, 0.1f, m.marker_a)
  m.done_init = true
}

type NEED struct {
  item *ItemItem
}

fn need_sub(pos int, needed *NEED) Depend {
  n := Depend{
    pos: pos,
    // img: gfx.new_overlay_billboard(),
    // text: gfx.new_overlay_text(),
    // available: needed.item.available(needed.count),
  }
  n.img.set_image(needed.item.img)
  n.img.set_size(16.0f, 16.0f)
  // n.text.set_text('x' .. needed.count)
  return n
}

fn new_group(m *Menu, name *char) {
  m.selected_group = m.groups.len
  g := Group{ 
    fa: 1.0f,
    a: 1.0f,
    name: name,
    // text: gfx.new_overlay_text() 
  }
  g.text.set_text(name)
  g.text.set_color(0.9f, 0.9f, 0.9f, 1.0f)
  g.text.set_position(240.0f - 8.0f * (2 + strlen(name)) as float, 248.0f)
  
  m.groups.push(g)
}

fn select(m *Menu, g int, e int, jump bool) {
  m.selected_group = clampi(g, 0, m.groups.len - 1)
  m.selected_entry = clampi(e, 0, m.group().entries.len - 1)
  if (jump)
    m.marker_a = 1.0f
  else 
    m.marker_a = 0.1f
}

fn add_entry(m *Menu, img *Image, text *char, needed vec[]NEED
  //, on_confirm, avail
  ) *Entry {
  e := Entry{
    //back: gfx.new_overlay_billboard(),
    //img: gfx.new_overlay_billboard(),
    //text: gfx.new_overlay_text(),
    key: text,
    x: 0.0f,
    y: 0.0f,
    a: 0.0f,
    fx: 0.0f,
    fy: 0.0f,
    fa: 0.0f,
    available: true,
    //on_confirm: on_confirm,
    //needed: needed,
  }
  e.back.set_color(0.1f, 0.1f, 0.1f, 1.0f)
  e.back.set_size(180.0f - 2.0f, 48.0f - 4.0f)
  e.img.set_image(img)
  e.img.set_color(1.0f, 1.0f, 1.0f, 1.0f)
  e.img.set_size(32.0f, 32.0f)
  e.text.set_text(text)
  e.text.set_color(0.9f, 0.9f, 0.9f, 1.0f)
  // if avail then e.available = avail() end
  for (i:=0; i<needed.len; ++i) {
    n := &needed[i]
    x := need_sub(i, n)
    e.available = e.available && x.available
    e.needed.push(x)
  }
  e.apply()
  g := m.group()
  g.entries.push(e)
  return &g.entries[g.entries.len-1]
}

