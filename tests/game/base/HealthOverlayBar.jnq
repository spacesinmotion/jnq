
use Graphics from tests.game.gfx.Graphics
use OverlayImage from tests.game.gfx.OverlayImage
use OverlayText from tests.game.gfx.OverlayText
use lerp, clamp from tests.game.math.util

type HealthOverlayBar struct {
  bar *OverlayImage
  back *OverlayImage
  text *OverlayText

  current_lp float
  lp float
  max_lp float
}

fn NewHealthOverlayBar(gfx *Graphics, max_lp float) HealthOverlayBar {
  w := 320.0f
  h := 16.0f // constants ?
  back := gfx.new_overlay_image()
  back.set_position(64.0f, 16.0f)
  back.set_color_rgb(4, 3, 34)
  back.set_size(w, h)
  bar := back.clone()
  bar.set_color_rgb(224, 53, 34)
  text := gfx.new_overlay_text()
  text.set_position(64.0f + w + 8.0f, 17.0f)
  text.set_scale(2.0f, 2.0f)
  text.set_color_rgb(224, 53, 34)
  // text.set_text(hob.lp .. '/' .. hob.max_lp)

  return HealthOverlayBar{bar, back, text, 0.0f, max_lp, max_lp}
}

fn destroy(hob *HealthOverlayBar) {
  hob.back.destroy()
  hob.bar.destroy()
  hob.text.destroy()
}

fn update(hob *HealthOverlayBar, dt float) {
  w := 320.0f
  h := 16.0f // constants ?

  hob.current_lp = lerp(hob.lp, hob.current_lp, 0.7f)
  hob.bar.set_size(w * hob.current_lp / hob.max_lp, h)
}

fn add(hob *HealthOverlayBar, v float) {
  hob.lp = clamp(hob.lp + v, 0.0f, hob.max_lp)
  // hob.text.set_text(hob.lp .. '/' .. hob.max_lp)
}
