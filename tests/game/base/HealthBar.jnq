
use BillboardImage from tests.game.gfx.BillboardImage
use pow, rand_in, lerp, clamp from tests.game.math.util

type HealthBar struct {
  bar *BillboardImage
  back *BillboardImage

  current_health float
  health float
  max_health float
  changed_time float
}

fn NewHealthBar(max_health float) HealthBar {
  back := null as *BillboardImage // gfx.new_overlay_billboard()
  back.set_color_rgb(4, 3, 34)
  back.set_size(80.0f, 10.0f)
  back.set_offset(-40.0f, 0.0f, 0.0f)
  back.set_pixel_scale(true)
  bar := back.clone()
  bar.set_color_rgb(224, 53, 34)
  bar.set_offset(-40.0f, 0.0f, -0.1f)

  return HealthBar{back, bar, 0.0f, max_health, max_health}
}

fn destroy(hb *HealthBar) {
  hb.bar.destroy()
  hb.back.destroy()
}

fn add_health(hb *HealthBar, v float) {
  hb.health = clamp(hb.health + v, 0.0f, hb.max_health)
  if (v < 0.0f)
    hb.changed_time = 0.25f
}

fn set_position(hb *HealthBar, x float, y float, z float) {
  hb.back.set_position(x, y, z)
  hb.bar.set_position(x, y, z)
}

fn change_intensitiy(hb *HealthBar) float {
  return hb.changed_time / 0.25f
}

fn update(hb *HealthBar, dt float) bool {
  if (hb.changed_time > 0.0f) 
    hb.changed_time = hb.changed_time - dt
  else
    hb.changed_time = 0.0f

  c := pow(hb.changed_time as double, 0.25) as float * 100.0f
  ci := c as int
  hb.back.set_color_rgb(4 + ci, 3 + ci, 34 + ci)
  hb.bar.set_color_rgb(224 - ci, 53 + ci, 34 + ci)

  c = hb.change_intensitiy()
  ox := rand_in(-15.0f, 15.0f) * c
  oy := rand_in(-5.0f, 15.0f) * c
  hb.back.set_offset(-40.0f + ox, oy, 0.0f)
  hb.bar.set_offset(-40.0f + ox, oy, -0.1f)

  hb.current_health = lerp(hb.health, hb.current_health, 0.7f)
  hb.bar.set_size(80.0f * hb.current_health / hb.max_health, 10.0f)
  return hb.current_health <= 0.25f
}