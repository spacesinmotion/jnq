
type iBaseTypes struct {
  cc char,
  bb bool,

  a i8,
  b i16,
  c i32,
  d i64,
}

type uBaseTypes struct {
  a u8,
  b u16,
  c u32,
  d u64,
}

type fBaseTypes struct {
  a f32,
  b f64,
}

type pBaseTypes struct {
  b *char,
  x string,
}

fn none_narrowing_conversation() {
  i1 := 12 as i64
  i1 = 32 as i32
  i1 = 32 as u32
  i1 = 32 as i16
  i1 = 32 as u16
  i1 = 32 as i8
  i1 = 32 as u8

  i2 := 12 as i32
  i2 = 32 as i16
  i2 = 32 as u16
  i2 = 32 as i8
  i2 = 32 as u8

  i3 := 12 as i16
  i3 = 32 as i8
  i3 = 32 as u8

  i4 := 12 as u64
  i4 = 32 as u32
  i4 = 32 as u16
  i4 = 32 as u8

  i5 := 12 as u32
  i5 = 32 as u16
  i5 = 32 as u8

  i6 := 12 as u16
  i6 = 32 as u8

  f1 := 25.6 as f64
  f1 = 45.6f
  f1 = 4.6 as f32
}

fn main() int {
  printf("basetypes...\n")

  ASSERT(1ul == sizeof(i8))
  ASSERT(1ul == sizeof(u8))

  ASSERT(2ul == sizeof(i16))
  ASSERT(2ul == sizeof(u16))

  ASSERT(4ul == sizeof(i32))
  ASSERT(4ul == sizeof(u32))
  ASSERT(4ul == sizeof(f32))

  ASSERT(8ul == sizeof(i64))
  ASSERT(8ul == sizeof(u64))
  ASSERT(8ul == sizeof(f64))

  // ASSERT(1ul == sizeof(i8))
  // ASSERT(1ul == sizeof(u8))

  // ASSERT(2ul == sizeof(i16))
  // ASSERT(2ul == sizeof(u16))

  ASSERT(4ul == sizeof(42))
  ASSERT(4ul == sizeof(42u))
  ASSERT(4ul == sizeof(2.4f))

  ASSERT(8ul == sizeof(42l))
  ASSERT(8ul == sizeof(76lu))
  ASSERT(8ul == sizeof(0.5))
  // ASSERT(8ul == sizeof(0.5d))

  printf(" ...ok\n")
  return 0
}