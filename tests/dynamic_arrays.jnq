
use printf from C.stdio

type ABC struct {
  a i32,
  b f32,
  c char,
}

fn check_all_doubled_c(a *i32, l i32){
  for (i := 0; i < l; ++i)
    ASSERT(a[i] == i * 2)
}

fn check_all_doubled(a[*]i32){
  for (i := 0; i < len(a) as i32; ++i)
    ASSERT(a[i] == i * 2)
}

fn simple_int()
{
  printf(" .simple_int\n")
  a := new[32]i32{}
  for (i := 0; i < 32; ++i)
    a[i] = i * 2

  ASSERT(32u == len(a))
  ASSERT(32u == cap(a))
  for (i := 0; i < 32; ++i)
    ASSERT(a[i] == i * 2)
  check_all_doubled_c(a, len(a) as i32)
  check_all_doubled(a)

  a = resize(a, 64)
  ASSERT(64u == len(a))
  ASSERT(64u == cap(a))

  a = reserve(a, 42)
  ASSERT(64u == len(a))
  ASSERT(64u == cap(a))

  a = push(a, 54321)
  ASSERT(65u == len(a))
  ASSERT(65u <= cap(a))
  ASSERT(8000u > cap(a))

  a = reserve(a, 8000)
  ASSERT(65u == len(a))
  ASSERT(8000u == cap(a))

  val := pop(a)
  print("len", len(a), "cap", cap(a))
  ASSERT(len(a) == 64u)
  ASSERT(8000u == cap(a))
  ASSERT(val == 54321)

  delete a
}

fn simple_struct()
{
  printf(" .simple_struct\n")

  b := new[3]ABC{}
  ASSERT(len(b) == 3u)
  ASSERT(cap(b) == 3u)
  for (i := 0; i < len(b) as i32; ++i) {
    b[i].a = i * 3
    b[i].b = i as f32 / 2.0f
    b[i].c = (i) as char + 'a'
  }
  for (i := 0; i < len(b) as i32; ++i) {
    ASSERT(b[i].a == i * 3)
    ASSERT(b[i].b == i as f32 / 2.0f)
    ASSERT(b[i].c == i as char + 'a')
  }

  delete b
}

fn main() i32 {
  printf("dynamic arrays\n")

  simple_int()
  simple_struct()

  printf(" ...ok\n")
  return 0
}