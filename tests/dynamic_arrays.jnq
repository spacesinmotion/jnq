
use printf from C.stdio
use qsort from C.stdlib

type ABC struct {
  a i32,
  b f32,
  c char,
}

fn check_all_doubled_c(a *i32, l i32){
  for (i := 0; i < l; ++i)
    ASSERT(a[i] == i * 2)
}

fn check_all_doubled(a[*]i32){
  for (i := 0; i < len(a); ++i)
    ASSERT(a[i] == i * 2)
}

fn simple_int() {
  printf(" .simple_int\n")
  a := new[32]i32{}
  for (i := 0; i < 32; ++i)
    a[i] = i * 2

  ASSERT(32u == len_s(a))
  ASSERT(32u == cap_s(a))
  ASSERT(32 == len(a))
  ASSERT(32 == cap(a))
  for (i := 0; i < len(a); ++i)
    ASSERT(a[i] == i * 2)
  check_all_doubled_c(a, len(a))
  check_all_doubled(a)

  a = resize(a, 64)
  ASSERT(64 == len(a))
  ASSERT(64 == cap(a))

  a = reserve(a, 42)
  ASSERT(64 == len(a))
  ASSERT(64 == cap(a))

  a = push(a, 54321)
  ASSERT(65 == len(a))
  ASSERT(65 <= cap(a))
  ASSERT(8000 > cap(a))

  a = reserve(a, 8000)
  ASSERT(65 == len(a))
  ASSERT(8000 == cap(a))

  val := pop(a)
  print("len", len(a), "cap", cap(a))
  ASSERT(len(a) == 64)
  ASSERT(8000 == cap(a))
  ASSERT(val == 54321)

  delete a

  a = null
  ASSERT(0 == len(a))
  ASSERT(0 == cap(a))
}

fn len_and_cap_member() {
  printf(" .len_and_cap_member\n")
  a := new[32]i32{}
  for (i := 0; i < 32; ++i)
    a[i] = i * 2

  ASSERT(32u == a.len_s)
  ASSERT(32u == a.cap_s)
  ASSERT(32 == a.len)
  ASSERT(32 == a.cap)

  a_ptr := &a
  ASSERT(a_ptr.len == 32)
  ASSERT(a_ptr.cap == 32)
  ASSERT(a_ptr.len_s == 32ul)
  ASSERT(a_ptr.cap_s == 32ul)

  delete a

  a = null
  ASSERT(0 == len(a))
  ASSERT(0 == cap(a))
}

fn push_and_pop_member() {
  printf(" .push_and_pop_member\n")
  a := new[32]i32{}
  for (i := 0; i < 32; ++i)
    a[i] = i * 2

  a.push(42)
  ASSERT(a.len == 33)

  ASSERT(42 == a.pop())
  ASSERT(a.len == 32)

  ASSERT(a.cap < 1024)
  a = a.reserve(1024)
  ASSERT(a.cap == 1024)

  ASSERT(a.len < 2048)
  a = a.resize(2048)
  ASSERT(a.cap == 2048)
  ASSERT(a.len == 2048)

  a = a.clear()
  ASSERT(a.len == 0)

  delete a;
}

fn adapt_array(vvv *[*]i32) {
  ASSERT((*vvv)[0] != 42)
  (*vvv)[0] = 42
  ASSERT((*vvv)[0] == 42)

  (*vvv).push(654321);
}

fn adapt_array_as_pointer() {
  printf(" .adapt_array_as_pointer\n")
  a := new[32]i32{}
  for (i := 0; i < 32; ++i)
    a[i] = i * 2

  ASSERT(a.len == 32)
  ASSERT(a[0] == 0)
  adapt_array(a)
  ASSERT(a[0] == 42)
  ASSERT(a.len == 33)

  delete a;
}

fn simple_struct()
{
  printf(" .simple_struct\n")

  b := new[3]ABC{}
  ASSERT(len(b) == 3)
  ASSERT(cap(b) == 3)
  for (i := 0; i < len(b); ++i) {
    b[i].a = i * 3
    b[i].b = i as f32 / 2.0f
    b[i].c = (i) as char + 'a'
  }
  for (i := 0; i < len(b); ++i) {
    ASSERT(b[i].a == i * 3)
    ASSERT(b[i].b == i as f32 / 2.0f)
    ASSERT(b[i].c == i as char + 'a')
  }

  delete b
}

type XYZ struct {
  a[*]f32,
}

fn as_members()
{
  printf(" .as_members\n")

  w := XYZ{null}
  ASSERT(len(w.a) == 0)
  ASSERT(cap(w.a) == 0)

  w.a = new[8]f32{}

  ASSERT(len(w.a) == 8)
  ASSERT(cap(w.a) == 8)

  for (i := 0; i < len(w.a); ++i)
    w.a[i] = i as f32 * 10.0f

  for (i := 0; i < len(w.a); ++i)
    ASSERT(w.a[i] == i as f32 * 10.0f)
}

fn comp(const ap any, const bp any) i32 {
  a := *(ap as *i32)
  b := *(bp as *i32)
  if (a < b) return -1
  if (a > b) return 1
  return 0
}

fn qsort_any_dynamic_array()
{
  printf(" .qsort_any_dynamic_array\n")

  a := new[]i32{}
  for (i := 0; i < 10; ++i)
    push(a, 100 - i *2)

  for (i := 1; i < len(a); ++i)
    ASSERT(a[i -1] > a[i])
  qsort(a, len_s(a), sizeof(i32), comp)
  for (i := 1; i < len(a); ++i)
    ASSERT(a[i -1] < a[i])

  delete a
}

type SomeAble interface {
  fn id(s *SomeAble) i32
}

type SomeImp struct {
  val i32
}

fn id(s *SomeImp) i32 {
  return s.val
}

fn interface_in_dynamic_array()
{
  printf(" .interface_in_dynamic_array\n")

  a := new[]SomeAble{}

  x := SomeImp{42}

  push(a, null)
  push(a, &x)

  ASSERT(a[0] == null)
  ASSERT(a[1] != null)
  ASSERT(a[1].id() == 42)

  delete a
}

fn create_an_array(l i32) [*]i32 {
  return reserve(new[]i32{}, l)
}

fn dynamic_array_as_return_value()
{
  printf(" .dynamic_array_as_return_value\n")

  a := create_an_array(42)
  ASSERT(len(a) == 0)
  ASSERT(cap(a) == 42)

  delete a
}

fn dynamic_array_null_test() {
  print("..dynamic_array_null_test\n")

  dyn_null := null as[*]i32

  ASSERT(dyn_null == null)
  ASSERT(null == dyn_null)
  ASSERT(!(dyn_null != null))
  ASSERT(!(null != dyn_null))

  ASSERT(!dyn_null)

  dyn_null = new[]i32{}
  ASSERT(dyn_null)
  delete dyn_null
}

type Some struct {
  id i32,
  d bool,
}

fn dead(s *Some) bool {
  return s.d
}

fn pop_on_check_test() {
  print("..pop_on_check_test\n")

  list_of_some := new[]Some{}
  list_of_some = push(list_of_some, Some{0, false})
  list_of_some = push(list_of_some, Some{1, true})
  list_of_some = push(list_of_some, Some{2, false})
  list_of_some = push(list_of_some, Some{3, false})

  for (i := len(list_of_some) - 1; i >= 0; --i) {
    if (list_of_some[i].dead())
      list_of_some[i] = pop(list_of_some)
  }

  ASSERT(len(list_of_some) == 3)
  ASSERT(list_of_some[0].id == 0)
  ASSERT(list_of_some[1].id == 3)
  ASSERT(list_of_some[2].id == 2)

  delete list_of_some
}

fn main() i32 {
  printf("dynamic arrays\n")

  simple_int()
  len_and_cap_member()
  push_and_pop_member()
  simple_struct()
  as_members()
  qsort_any_dynamic_array()
  interface_in_dynamic_array()
  dynamic_array_as_return_value()
  dynamic_array_null_test()
  pop_on_check_test()

  printf(" ...ok\n")
  return 0
}