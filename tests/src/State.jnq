
cfn isspace(c char) bool
cfn isalnum(c char) bool


// store the location in a file and run through
type State struct {
  file *char
  c *char
  line int
  column int
}

fn new(c *char, file *char) State { 
  return State{
    file: file, 
    c: c,
    line: 1,
    column: 1 
  }
}

fn skip(s *State, c int) {
  s.c = &s.c[c]
  s.column += c
}


fn skip_whitespace_space(st *State) bool {
  old State = *st;
  while (*st->c != '\0' && isspace(*st->c)) {
    if (*st->c == '\n') {
      st->line++;
      st->column = 1;
    } else
      ++st->column;
    ++st->c;
  }
  return old.c > st->c;
}

fn skip_line_comment(st *State) bool {
  if (st->c[0] != '\0' && st->c[0] == '/' && st->c[1] == '/') {
    while (*st->c) {
      if (*st->c == '\n') {
        st->line++;
        st->column = 1;
        ++st->c;
        break;
      } else {
        ++st->column;
        ++st->c;
      }
    }
    return true;
  }
  return false;
}

fn skip_whitespace(st *State) {
  while (st.skip_whitespace_space() || st.skip_line_comment()) {
  }
}

fn check_whitespace_for_nl(st *State) bool {
  if (st->line > 1)
    for (i int = 1; i <= st->column; ++i)
      if (!isspace(st->c[-i]))
        return false;
  return st->line > 1;
}

fn check_word(st *State , word *char) bool {
  st.skip_whitespace();
  old State = *st;
  while (st->c[0] && *word && *word == st->c[0]) {
    st.skip(1);
    ++word;
  }
  if (*word == '\0' && !isalnum(st->c[0]) && st->c[0] != '_')
    return true;
  *st = old;
  return false;
}

fn check_op(st *State, op *char) bool {
  st.skip_whitespace()
  old State = *st;
  while (st->c[0] != '\0' && op[0] != '\0' && op[0] == st->c[0]) {
    st.skip(1);
    ++op
  }
  if (op[0] == '\0')
    return true
  *st = old
  return false
}