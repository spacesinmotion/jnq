
cfn isspace(c char) bool
cfn isalpha(c char) bool
cfn isalnum(c char) bool
cfn strtol(s *char, e **char, base int) int
cfn strtod(s *char, e **char) double

// type Test struct {
//   s *State
// }

// store the location in a file and run through
type State struct {
  file *char
  c *char
  line int
  column int
}

fn new(c *char, file *char) State { 
  return State{
    file: file, 
    c: c,
    line: 1,
    column: 1 
  }
}

fn skip(s *State, c int) {
  s.c = &s.c[c]
  s.column += c
}

fn back(s *State, c int) State {
  b State = *s;
  if (b.column < c) {
    b.column = 0;
    //FATAL(&b, "internal error calculating location");
  }
  b.column -= c;
  return b;
}

fn skip_whitespace_space(st *State) bool {
  old State = *st;
  while (*st->c != '\0' && isspace(*st->c)) {
    if (*st->c == '\n') {
      st->line++;
      st->column = 1;
    } else
      ++st->column;
    ++st->c;
  }
  return old.c > st->c;
}

fn skip_line_comment(st *State) bool {
  if (st->c[0] != '\0' && st->c[0] == '/' && st->c[1] == '/') {
    while (*st->c) {
      if (*st->c == '\n') {
        st->line++;
        st->column = 1;
        ++st->c;
        break;
      } else {
        ++st->column;
        ++st->c;
      }
    }
    return true;
  }
  return false;
}

fn skip_whitespace(st *State) {
  while (st.skip_whitespace_space() || st.skip_line_comment()) {
  }
}

fn check_whitespace_for_nl(st *State) bool {
  if (st->line > 1)
    for (i int = 1; i <= st->column; ++i)
      if (!isspace(st->c[-i]))
        return false;
  return st->line > 1;
}

fn check_word(st *State , word *char) bool {
  st.skip_whitespace();
  old State = *st;
  while (st->c[0] && *word && *word == st->c[0]) {
    st.skip(1);
    ++word;
  }
  if (*word == '\0' && !isalnum(st->c[0]) && st->c[0] != '_')
    return true;
  *st = old;
  return false;
}

fn check_op(st *State, op *char) bool {
  st.skip_whitespace()
  old State = *st;
  while (st->c[0] != '\0' && op[0] != '\0' && op[0] == st->c[0]) {
    st.skip(1);
    ++op
  }
  if (op[0] == '\0')
    return true
  *st = old
  return false
}

cfn strncmp(a *char, b *char, l int) int

fn check_key_word(b *char, e *char) bool {
  if ((e - b) as int == 2 && strncmp(b, "as", 2) == 0)
    return true;
  if ((e - b) as int == 2 && strncmp(b, "if", 2) == 0)
    return true;
  if ((e - b) as int == 2 && strncmp(b, "fn", 2) == 0)
    return true;
  if ((e - b) as int == 2 && strncmp(b, "do", 2) == 0)
    return true;
  if ((e - b) as int == 3 && strncmp(b, "cfn", 3) == 0)
    return true;
  if ((e - b) as int == 3 && strncmp(b, "for", 3) == 0)
    return true;
  if ((e - b) as int == 3 && strncmp(b, "use", 3) == 0)
    return true;
  if ((e - b) as int == 4 && strncmp(b, "type", 4) == 0)
    return true;
  if ((e - b) as int == 5 && strncmp(b, "while", 5) == 0)
    return true;
  return false;
}

fn check_identifier(st *State ) bool {
  old State = *st;
  if (st->c[0] != '\0' && (isalpha(st->c[0]) || st->c[0] == '_')) {
    while (st->c[0] != '\0' && (isalnum(st->c[0]) || st->c[0] == '_'))
      st.skip(1);
  }
  if (old.c < st->c && !check_key_word(old.c, st->c))
    return true;
  *st = old;
  return false;
}

fn read_int(st *State, i *int) bool {
  end *char;
  *i = strtol(st->c, &end, 10);
  if (end == st->c)
    return false;
  st->column += (end - st->c) as int;
  st->c = end;
  return true;
}


fn read_float(st *State, f *double) bool {
  end *char;
  *f = strtod(st->c, &end);
  if (end == st->c)
    return false;
  st->column += (end - st->c) as int;
  st->c = end;
  return true;
}

