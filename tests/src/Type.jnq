
use Statement from Statement
use State from State
use Module from Module

type TypeKind enum { ModuleT, StructT, UnionT, EnumT, UnionTypeT, ArrayT, PointerT, FnT, PlaceHolder }

type TypeSelect union {
  structT *Struct
  enumT *Enum
  unionT *UnionType
  fnT *Function
  moduleT *Module 

  array_count int
}

type Type struct {
  name *char
  select TypeSelect
  kind TypeKind
  child *Type
}

type Struct struct {
  member *Variable
  module *Module
}

type Enum struct {
  entries *EnumEntry
  module *Module
}

type EnumEntry struct {
  name *char
  value int
  valueSet bool
  next *EnumEntry 
}

type UnionType struct {
  member *UnionTypeEntry
  module *Module
}

type UnionTypeEntry struct {
  _type *Type
  index int
  next *UnionTypeEntry
}

type Function struct {
  parameter *Variable
  returnType *Type
  is_extern_c bool 
  body *Statement
  module *Module 
}

type Variable struct {
  name *char
  _type *Type
  location State
  next *Variable
}

fn equals(t1 *Type, t2 *Type) bool {
  // this should be globals
  global := Module{"", "", null, true, null}
  Null := Type{"null_t", TypeSelect{&Struct{null, &global}}, TypeKind.StructT, null};

  if (!t1 && !t2)
    return false;
  if (t1 == &Null)
    return t2 == &Null || t2->kind == TypeKind.PointerT;
  if (t2 == &Null)
    return t1 == &Null || t1->kind == TypeKind.PointerT;
  if ((!t1 && t2) || (t1 && !t2))
    return false;
  if (t1 == t2)
    return true;
  if (t1->kind != t2->kind)
    return false;
  return equals(t1->child, t2->child);
}

fn defined_module(t *Type) *Module {
  switch (t.kind) {
  case TypeKind.StructT:
    return t.select.structT.module;
  case TypeKind.UnionT:
    return t.select.structT.module;
  case TypeKind.EnumT:
    return t.select.enumT.module;
  case TypeKind.UnionTypeT:
    return t.select.unionT.module;
  case TypeKind.FnT:
    return t.select.fnT.module;
  case TypeKind.ModuleT:
    ASSERT(false);
  case TypeKind.ArrayT:
    ASSERT(false);
  case TypeKind.PointerT:
    ASSERT(false);
  case TypeKind.PlaceHolder:
    //FATALX("invalid type for getting defined module.");
    ASSERT(false);
  }
  return null;
}