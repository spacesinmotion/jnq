
use State from State
use Type, Variable from Type

type ExpressionType enum {
  NullA, BoolA, CharA, IntA, FloatA, DoubleA, StringA,
  IdentifierA, VarE, BraceE, CallE, ConstructE, AccessE,
  MemberAccessE, AsCast, UnaryPrefixE, UnaryPostfixE, BinaryOperationE,
}

type ExpressionSelect union {
  b bool
  c [3]char
  i int 
  f double
  s *char
  id *Identifier
  var *Variable
  brace *Brace 
  call *Call
  construct *Construct 
  access *Access
  member *MemberAccess
  cast *Cast 
  unpre *UnaryPrefix
  unpost *UnaryPostfix
  binop *BinaryOperation
}

type Expression struct {
  select ExpressionSelect
  _type ExpressionType
  localtion State
} 

type Identifier struct {
  name *char
  _type *Type
}

type Brace struct {
  p *Expression
}

type Call struct {
  o *Expression
  p *Parameter
}

type Construct struct {
  _type *Type
  p *Parameter
}

type Access struct {
  o *Expression
  p *Expression
}


type MemberAccess struct {
  o *Expression
  o_type *Type
  member *Identifier
  pointer bool
}

type Cast struct {
  o *Expression
  _type *Type
}


type UnaryPrefix struct {
  o *Expression
  op *char
}

type UnaryPostfix struct {
  o *Expression
  op *char
}

type Parameter struct {
  p *Expression
  v *Identifier
  next *Parameter
}

type Association enum { ASSOC_NONE, ASSOC_LEFT, ASSOC_RIGHT }

type BinOp struct {
  op *char
  prec int
  assoc Association
  returns_bool bool
}

// ops []BinOp = {
//     {">>=", 100 - 14, ASSOC_RIGHT, false}, //
//     {"<<=", 100 - 14, ASSOC_RIGHT, false}, //
//                                            //
//     {"==", 100 - 7, ASSOC_LEFT, true},     //
//     {"!=", 100 - 7, ASSOC_LEFT, true},     //
//     {"<=", 100 - 6, ASSOC_LEFT, true},     //
//     {">=", 100 - 6, ASSOC_LEFT, true},     //
//     {"+=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"-=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"*=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"/=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"%=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"&=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"^=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"|=", 100 - 14, ASSOC_RIGHT, false},  //
//     {"&&", 100 - 11, ASSOC_LEFT, true},    //
//     {"||", 100 - 12, ASSOC_LEFT, true},    //
//     {"<<", 100 - 5, ASSOC_LEFT, false},    //
//     {">>", 100 - 5, ASSOC_LEFT, false},    //
//                                            //
//     {"*", 100 - 3, ASSOC_LEFT, false},     //
//     {"/", 100 - 3, ASSOC_LEFT, false},     //
//     {"%", 100 - 3, ASSOC_LEFT, false},     //
//     {"+", 100 - 4, ASSOC_LEFT, false},     //
//     {"-", 100 - 4, ASSOC_LEFT, false},     //
//     {"<", 100 - 6, ASSOC_LEFT, false},     //
//     {">", 100 - 6, ASSOC_LEFT, false},     //
//     {"&", 100 - 8, ASSOC_LEFT, false},     //
//     {"^", 100 - 9, ASSOC_LEFT, false},     //
//     {"|", 100 - 10, ASSOC_LEFT, false},    //
//                                            //
//     {"=", 100 - 14, ASSOC_RIGHT, false},   //
// }

type BinaryOperation struct {
  o1 *Expression
  o2 *Expression
  op *BinOp
}