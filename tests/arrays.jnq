
fn simple() {
  printf(" .simple\n")

  a := [3]int{}
  a[0] = 1
  a[1] = 2
  a[2] = 4

  ASSERT(a[0] == 1)
  ASSERT(a[1] == 2)
  ASSERT(a[2] == 4)

  d := []int{10,20,30}
  for (i := 0; i < 3; ++i) 
    ASSERT(d[i] == (i+1)*10)
}

fn multidimension() {
  printf(" .multidimension\n")

  a := [2][3][4]int{}
  a[0][0][0] = 1
  a[1][2][3] = 2

  ASSERT(a[0][0][0] == 1)
  ASSERT(a[1][2][3] == 2)
}

fn construct_assign() {
  printf(" .construct_assign\n")

  a := [3]int{6, 2, 153}
  ASSERT(a[0] == 6)
  ASSERT(a[1] == 2)
  ASSERT(a[2] == 153)

  b := []int{8, 6, 4, 2}
  ASSERT(b[0] == 8)
  ASSERT(b[1] == 6)
  ASSERT(b[2] == 4)
  ASSERT(b[3] == 2)
}

fn matrix_test() {
  printf(" .matrix_test\n")

  m := [4][4]int{}
  for (i := 0; i<4; ++i)
    for (j := 0; j<4; ++j)
      m[i][j] = i*4+j
  ASSERT(m[0][0] == 0)
  ASSERT(m[1][0] == 4)
  ASSERT(m[2][0] == 8)
  ASSERT(m[3][0] == 12)
  ASSERT(m[0][1] == 1)
  ASSERT(m[0][2] == 2)
  ASSERT(m[0][3] == 3)
}

fn main() int {
  printf("array test\n")
  
  simple()
  construct_assign()
  multidimension()
  matrix_test()
  
  printf(" ...ok\n")
  return 0
}